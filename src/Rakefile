require 'JSON'
require 'pp'
require 'colorize'
require 'closure-compiler'
require 'fileutils'

task default: :build

directory '../resources/css'
directory '../resources/js'
directory '../resources/img'
directory '../resources/fonts'

desc 'Build all resources'
task build: [
  'build:scss_utils',
  'build:css',
  'build:js',
  'build:fonts',
  'build:img'
] do
  puts 'Resources have been built!'.magenta
  puts "Total size of app.css is now #{file_size_in_kb('../resources/css/app.css')} kb"
  puts "Total size of app.js is now #{file_size_in_kb('../resources/js/app.js')} kb"
end

namespace :build do
  # desc 'Build scss utilities'
  task :scss_utils do
  end

  desc 'Build css'
  task css: ['../resources/css', 'scss_utils'] do
    system "compass compile --sass-dir sass --css-dir ../resources/css --out-style compressed --force"
    replace_paths
  end

  desc 'Minify and concatenate js'
  task js: ['../resources/js'] do
    compilation_levels = {
      simple: 'SIMPLE_OPTIMIZATIONS',
      advanced: 'ADVANCED_OPTIMIZATIONS',
      whitespace: 'WHITESPACE_ONLY'
    }
    contents = Closure::Compiler.new(compilation_level: compilation_levels[:simple]).compile_files paths_to_js_files
    File.open "../resources/js/app.js", "w" do |file|
      file.write contents
    end
    replace_paths
    puts "overwrite".yellow + " ../resources/js/app.js"
  end

  desc 'Copy images'
  task img: ['../resources/img'] do
    remove_files_in '../resources/img'
    img_paths.each do |img_path|
      FileUtils.copy_file img_path, "../resources/#{img_path}"
    end
  end

  desc 'Copy fonts'
  task fonts: ['../resources/fonts'] do
    remove_files_in '../resources/fonts'
    font_paths.each do |font_path|
      FileUtils.copy_file font_path, "../resources/#{font_path}"
    end
  end
end

def replace_paths
  JSON.parse(File.read 'paths.json').each do |key, value|
    if File.exists? "../#{key}"
      contents = File.read "../#{key}"
      contents.gsub! value["replace"], value["with"]
      File.open "../#{key}", "w" do |file|
        file.write contents
      end
    end
  end
end

def js_components
  JSON.parse File.read File.join 'js', 'components.json'
end

def paths_to_js_files
  js_files = []
  js_components.each do |name, path|
    js_files << File.join('js', path)
  end
  js_files
end

def file_size_in_kb file_path
  size = File.size(file_path) / 1024.0
  size.round
end

def font_paths
  fonts = []
  Dir["fonts/**/*"].each do |path|
    fonts << path unless path.include?("config.json")
  end
  fonts
end

def img_paths
  Dir["img/**/*"]
end

def remove_files_in folder_path
  Dir["#{folder_path}/**/*"].each do |file|
    FileUtils.rm_rf file
  end
end
