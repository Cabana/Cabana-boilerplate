require 'JSON'
require 'pp'
require 'colorize'
require 'closure-compiler'
require 'fileutils'
require 'httparty'

task default: :build

css_build_dir   = '../resources/css'
js_build_dir    = '../resources/js'
img_build_dir   = '../resources/img'
fonts_build_dir = '../resources/fonts'

directory css_build_dir
directory js_build_dir
directory img_build_dir
directory fonts_build_dir

desc 'Build all resources'
task build: [
  'build:css',
  'build:js',
  'build:fonts',
  'build:img'
] do
  puts 'Resources have been built!'.magenta
  puts "Total size of app.css is now #{file_size_in_kb("#{css_build_dir}/app.css")} kb"
  puts "Total size of app.js is now #{file_size_in_kb("#{js_build_dir}/app.js")} kb"
end

namespace :build do
  desc "Build all resources and make them ready for deployment"
  task for_deploy: [
    'build',
    'remove:console.log',
    'remove:alert'
  ] do
    puts 'Resources are now ready for deployment'.magenta
  end

  desc 'Build css'
  task css: [css_build_dir] do
    system "compass compile --css-dir #{css_build_dir} --force"
  end

  desc 'Minify and concatenate js'
  task js: [js_build_dir] do
    compilation_levels = {
      simple: 'SIMPLE_OPTIMIZATIONS',
      advanced: 'ADVANCED_OPTIMIZATIONS',
      whitespace: 'WHITESPACE_ONLY'
    }
    contents = Closure::Compiler.new(compilation_level: compilation_levels[:simple]).compile_files paths_to_js_files
    File.open "#{js_build_dir}/app.js", "w" do |file|
      file.write contents
    end
    puts "overwrite".yellow + "#{js_build_dir}/app.js"
  end

  desc 'Copy images'
  task img: [img_build_dir] do
    img_paths.each {|ip| FileUtils.copy_file ip, "#{img_build_dir}/#{ip.gsub('img/', '')}" }
  end

  desc 'Copy fonts'
  task fonts: [fonts_build_dir] do
    remove_files_in fonts_build_dir
    font_paths.each {|fp| FileUtils.copy_file fp, "#{fonts_build_dir}/#{fp.gsub('fonts/', '')}" }
  end
end

desc "Replace paths as specified in paths.json"
task :replace_paths do
  JSON.parse(File.read 'paths.json').each do |key, value|
    replace value["replace"], with: value["with"], in_file: key
  end
  puts 'Replaced paths'.yellow
end

# TODO: Test this on Windows
desc "Build and export project to path"
task :export, :path do |t, args|
  # build the resources folder
  Rake::Task["build"].invoke

  # get path to export folder
  export_folder_path = "../#{args[:path].split('/').last}"

  # remove the export folder and destination folder if they exist
  FileUtils.rm_r args[:path] if File.exists?(args[:path])
  FileUtils.rm_r export_folder_path if File.exists?(export_folder_path)

  # make the export folder
  FileUtils.mkdir export_folder_path

  # compile php files into html and place them in the export folder
  if folder_contains_php? '../'
    compile_php_files_into export_folder_path
  end

  # copy each html file into the export folder
  Dir["../*.html"].each do |file|
    filename = file.split('/').last
    FileUtils.copy_file file, "#{export_folder_path}/#{filename}"
  end

  # copy the resources folder into the export folder
  FileUtils.cp_r "../resources", "#{export_folder_path}/resources"

  # copy the export folder to the specified path
  cp_r export_folder_path, args[:path]

  # remove the export folder from the project
  FileUtils.rm_r export_folder_path
end

namespace :remove do
  desc "Remove console.log statements from app.js"
  task "console.log" do
    replace /console\.log\(.+?\);?/, with: '', in_file: "#{js_build_dir}/app.js"
    puts 'Removed console.logs'.magenta
  end

  desc "Remove alert statements from app.js"
  task "alert" do
    replace /alert\(.+?\);?/, with: '', in_file: "#{js_build_dir}/app.js"
    puts 'Removed alerts'.magenta
  end
end

Kernel.trap("EXIT") do
  Rake::Task[:replace_paths].execute
end

def replace pattern, hash = {}
  file_path = hash[:in_file]
  with = hash[:with]

  contents = File.read file_path if File.exists? file_path
  contents.gsub!(pattern, with)
  File.open file_path, "w" do |file|
    file.write contents
  end
end

def compile_php_files_into folder_path
  project_path = Dir.pwd.gsub('/src', '')
  current_project = project_path.split('/').last

  cp_r project_path, '/Volumes/inetpub/Cabana/Kunder/wwwroot/frontend'

  Dir['../*.php'].each do |php_file|
    php_file.gsub! '../', ''
    file = File.new "#{folder_path}/#{php_file.gsub('php', 'html')}", "w"
    file.puts HTTParty.get("http://kunder.cabana.dk/frontend/#{current_project}/#{php_file}").body
    file.close
  end

  FileUtils.rm_r "/Volumes/inetpub/Cabana/Kunder/wwwroot/frontend/#{current_project}"
end

def js_components
  JSON.parse File.read File.join 'js', 'components.json'
end

def paths_to_js_files
  js_components.map {|name, path| File.join('js', path) }
end

def file_size_in_kb file_path
  File.size(file_path)./(1024.0).round
end

def font_paths
  Dir["fonts/**/*"].map {|path| path unless path.include?("config.json") }.compact
end

def img_paths
  Dir["img/**/*"]
end

def remove_files_in folder_path
  Dir["#{folder_path}/**/*"].each {|file| FileUtils.rm_rf file }
end

def folder_contains_php? folder
  true if Dir["#{folder}/*.php"].length > 0
end

def folder_contains_php? folder
  true if Dir["#{folder}/*.php"].length > 0
end
