{"name":"Cabana-boilerplate","tagline":"Cabana's front-end boilerplate","body":"# Cabana Boilerplate\r\n\r\nThis is our very neat boilerplate for creating awesome websites.\r\n\r\n## How to get setup\r\nIf you already have all dependencies setup and configured the simply run `git clone https://github.com/Cabana/Cabana-boilerplate.git` from the command line to get started.\r\n\r\nHowever if you don't follow these steps.\r\n\r\n### 1. Git\r\nIf you're on Windows you can either use the [GitHub GUI app for windows](http://git-scm.com/downloads/guis) or look at the [git webite](http://git-scm.com/) for how to install the binary.\r\n\r\nIf you're on a Mac we suggest you install [Homebrew](http://mxcl.github.io/homebrew/) and then install git with `brew install git`.\r\n\r\n### 2. Ruby\r\nIf you're Windows go to [rubyinstall.org](http://rubyinstaller.org/) and follow the steps there.\r\n\r\nIf you're on a Mac you will need to install rvm. A good guide can be found [here](http://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac/).\r\n\r\nYou should be on Ruby version 2.0.0 or later when you're done.\r\n\r\n### 2.1. Ruby (Windows only)\r\nFor guard to work, devkit needs to be installed. Download at: http://rubyinstaller.org/downloads/. Docs at: https://github.com/oneclick/rubyinstaller/wiki/development-kit\r\n\r\n### 3. Clone down the boilerplate\r\nThen Git and Ruby have been setup you should be able to clone down the repo with `git clone https://github.com/Cabana/Cabana-boilerplate.git`.\r\n\r\n### 4. Install gem dependencies\r\nMake sure [bundler](http://gembundler.com/) is installed with `gem install bundler`. Then from within the root of the project run `bundle install` to install gem dependencies.\r\n\r\n## How to use\r\n### Build script\r\nThe build script itself it written using a Ruby gem called [Rake](http://rake.rubyforge.org/). Rake is a task runner kind of thing. It can run tasks (comprised of just Ruby code) and those tasks can have dependencies. Those tasks can then be run from the command line.\r\n\r\nWhen you wanna use the build script from the command line you have to be standing in the src folder or any of its subfolders. Otherwise the Rakefile can't be found.\r\n\r\nTo list all of the build scripts tasks run `rake --tasks`. This will show you a list of all the tasks including how to call them from the command line and a small description of that they do.\r\n\r\n`rake build` is setup as the default task, which means that simply running `rake` is the same as running `rake build`.\r\n\r\nHere is a list of the tasks and what they do\r\n\r\n- `build` will run `build:css`, `build:js` , `build:fonts` and `build:img`.\r\n- `build:css` will compile SCSS into CSS.\r\n- `build:fonts` will copy over the fonts.\r\n- `build:img` will copy over the images.\r\n- `build:js` will concatenate and minify javascript, and compile coffeescript.\r\n- `build:for_deploy` will run `build`, `compress_img`, `replace_paths`\r\n- `compress_img` will compress images in src/js\r\n- `export` will export the project to a folder.\r\n- `replace_paths` will replace paths as specified in config.rb.\r\n- `update` will update the Rakefile and install latest dependencies.\r\n\r\n### Guard\r\n\"[Guard](https://github.com/guard/guard) is a command line tool to easily handle events on file system modifications.\"\r\n\r\nWhen guard is running it will watch the src folder for changes and generate a new build when you change something. So for example when you change something in the sass folder it will recompile it using the build script.\r\n\r\nIf you're using LiveReload, guard will also reload you browser.\r\n\r\nTo start guard run `guard` from the root of the project.\r\n\r\n### The config file\r\nThe build script can be configured in the config.rb file. Descriptions for the individual settings can be found in the sections below.\r\n\r\n### JavaScript\r\nTo build the JavaScript run `rake build:js`.\r\n\r\nThis will concatenate and minify your required JavaScript files and compile CoffeeScript files.\r\n\r\nSince the order in which JavaScript file are concatenated is important you will send a setting for this in the config.rb file. The setting is called `@js_components` and it is an array filepaths to the JavaScript files you wanna use.\r\n\r\n`@js_components` should could look something like this.\r\n\r\n```ruby\r\n@js_components = [\r\n  \"js/modernizr.js\",\r\n  \"js/jquery.js\",\r\n  \"js/foundation/foundation.js\",\r\n  \"js/foundation/foundation.clearing.js\",\r\n  \"js/foundation/foundation.interchange.js\",\r\n  \"js/some-file.coffee\",\r\n  \"js/init.js\"\r\n]\r\n```\r\n\r\nThe path specified is relative to the src folder.\r\n\r\nThe build script will use this and make sure your files are concatenated in this order.\r\n\r\n### CSS\r\nThe build the CSS run `rake build:css`.\r\n\r\nThis will tell compass to compile the files inside the sass folder. The settings for compass can be found in config.rb\r\n\r\nAny file who's name starts with an underscore is a partial and therefore wont be compiled into a CSS file.\r\n\r\nThe sass compile options can be changed by changing `@sass_compile_options` in config.rb. To see the available options run `sass --help`.\r\n\r\n### Replacing paths\r\nSometimes its nessecary to edit the paths to some asset after a build. This could be if the production setup uses a super deep folder structure that you don't wish to mirror while developing.\r\n\r\nTo fix that edit the `@replacements` variable in config.rb.\r\n\r\nThis file should look something like this\r\n\r\n```ruby\r\n@replacements = {\r\n  \"../../resources/css/www_kongress_dk/app.css\" => [\r\n    { replace: \"../img\", with: \"../../img/www_kongress_dk\" },\r\n    { replace: \"../fonts\", with: \"../../fonts/www_kongress_dk\" }\r\n  ]\r\n}\r\n```\r\n\r\nThere is a rake task for doing this (its `rake replace_paths`) but you shouldn't need to explicitly call it. It will be called after having built JavaScript or CSS.\r\n\r\n### Getting ready for deployment\r\nIf you're getting ready to move to production it might be a good idea to build the resources using `rake build:for_deploy`.\r\n\r\n### Exporting\r\nThe build script makes it possible to export the project to another location. This would typically be somewhere on the I drive so its viewable via kunder.cabana.dk.\r\n\r\nTo export the project edit `@export_dir` in config.rb and run `rake export`. That should do it!\r\n\r\nIf you have any PHP files in your project the script will do some magic and compile them into html files.\r\n\r\n### Running code after any rake task\r\nIf you need to run some code after a specific task has run, such as copying the resources to another folder that can defined using the `after` method in config.rb. Here is an example.\r\n\r\n```ruby\r\nafter 'build' do\r\n  # do something\r\nend\r\n\r\nafter 'build:for_deploy' do\r\n  # do something else\r\nend\r\n```\r\n\r\n### Solution specific rake tasks\r\nSometimes it might be useful to define rake tasks that are specific to the current solution. That can be done by creating a file named solution.rb inside the src folder. In there you just define your rake tasks and they will be available through the standard `rake` command.\r\n\r\nIts a good idea to group the solution specific tasks under a namespace to avoid conflicts. Here is an example.\r\n\r\n```ruby\r\nnamespace :solution do\r\n  task :say_hello do\r\n    puts \"hello world\"\r\n  end\r\nend\r\n```\r\n\r\n### Updating Rakefile\r\nThe build script often gets updated and its always a good idea to be on the latest version. Run `rake udpate` to replace the contents of Rakefile with whatever is on the GitHub master branch. Note this is not tested on Windows...\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}